default_platform(:ios)
platform :ios do
    desc "Match Certs"
    lane :match_certs do |options|
        readonly=options.fetch(:readonly, true)
        development=options.fetch(:development, true)
        appstore=options.fetch(:appstore, true)
        app_store_connect_api_key(
           key_id: ENV["APPSTORE_KEY_ID"],
           issuer_id: ENV["APPSTORE_ISSUER_ID"],
           key_content: ENV["APPSTORE_API_KEY"],
           is_key_content_base64: true
        )

        app_bundle_ids = ENV["APP_BUNDLE_IDS"]&.split(',')&.map(&:strip) || []
        app_bundle_ids = [ENV["APP_BUNDLE_ID"]] if app_bundle_ids.empty?
        app_bundle_ids.each do |bundle_id|
            if appstore
               match(
                 app_identifier: bundle_id,
                 type: "appstore",
                 readonly: readonly
               )
            end
            if development
                match(
                 app_identifier: bundle_id,
                 type: "development",
                 readonly: readonly
                )
            end
        end
    end

    desc "Export Certs"
    lane :export_certs do |options|
         output_path=options[:out]
         readonly=options.fetch(:readonly, true)
         development=options.fetch(:development, true)
         appstore=options.fetch(:appstore, true)
         app_store_connect_api_key(
            key_id: ENV["APPSTORE_KEY_ID"],
            issuer_id: ENV["APPSTORE_ISSUER_ID"],
            key_content: ENV["APPSTORE_API_KEY"],
            is_key_content_base64: true
         )
         if appstore
           match(
             type: "appstore",
             readonly: readonly,
             output_path: output_path

           )
         end
         if development
              match(
               type: "development",
               readonly: readonly,
               output_path: output_path
              )
         end
    end

    lane :nuke_certs do |options|
     development=options.fetch(:development, true)
     appstore=options.fetch(:appstore, true)
     app_store_connect_api_key(
         key_id: ENV["APPSTORE_KEY_ID"],
         issuer_id: ENV["APPSTORE_ISSUER_ID"],
         key_content: ENV["APPSTORE_API_KEY"],
         is_key_content_base64: true
     )
      if appstore
         match_nuke(
           type: "appstore",
           readonly: false,
         )
      end
      if development
           match_nuke(
            type: "development",
            readonly: false,
          )
      end
   end

   lane :codesign do
     setup_ci()
     app_store_connect_api_key(
        key_id: ENV["APPSTORE_KEY_ID"],
        issuer_id: ENV["APPSTORE_ISSUER_ID"],
        key_content: ENV["APPSTORE_API_KEY"],
        is_key_content_base64: true
     )
     match(
       type: 'appstore',
       readonly: true,
     )
   end

   lane :build_ipa do
     setup_ci()
     app_store_connect_api_key(
        key_id: ENV["APPSTORE_KEY_ID"],
        issuer_id: ENV["APPSTORE_ISSUER_ID"],
        key_content: ENV["APPSTORE_API_KEY"],
        is_key_content_base64: true
     )
     app_bundle_ids = ENV["APP_BUNDLE_IDS"]&.split(',')&.map(&:strip) || []
     app_bundle_ids = [ENV["APP_BUNDLE_ID"]] if app_bundle_ids.empty?
     app_bundle_ids.each do |bundle_id|
         profile_name = "match AppStore #{bundle_id.strip}"
         target = bundle_id.include?("NotificationService") ? "NotificationService" : "Runner"
         update_code_signing_settings(
           use_automatic_signing: false,
           path: ENV["XCODE_PROJECT_NAME"],
           targets: target,
           team_id: ENV["DEVELOPER_PORTAL_TEAM_ID"],
           bundle_identifier: bundle_id.strip,
           code_sign_identity: "Apple Distribution",
           profile_name: profile_name
         )
     end
      match(
        type: 'appstore',
        readonly: true,
        app_identifier: app_bundle_ids,
        git_basic_authorization: Base64.strict_encode64(ENV["GIT_AUTHORIZATION"])
      )
     gym(
       configuration: ENV["CONFIGURATION"],
       workspace: ENV["WORKSPACE"],
       scheme: ENV["XCODE_SCHEME"],
       export_method: "app-store",
       verbose: true,
       clean: true
     )
   end

   lane :upload_ipa_to_testflight do
        setup_ci()
        app_store_connect_api_key(
            key_id: ENV["APPSTORE_KEY_ID"],
            issuer_id: ENV["APPSTORE_ISSUER_ID"],
            key_content: ENV["APPSTORE_API_KEY"],
            is_key_content_base64: true
        )
        pilot(
          ipa: ENV["IPA_FILE_PATH"],
          app_identifier: ENV["APP_BUNDLE_ID"],
          skip_waiting_for_build_processing: true,
          skip_submission: true,
          distribute_external: false,
          notify_external_testers: false
        )
   end

   lane :distribute_to_testflight do
         setup_ci()
         app_store_connect_api_key(
             key_id: ENV["APPSTORE_KEY_ID"],
             issuer_id: ENV["APPSTORE_ISSUER_ID"],
             key_content: ENV["APPSTORE_API_KEY"],
             is_key_content_base64: true
         )
         match(
           type: 'appstore',
           readonly: true,
           git_basic_authorization: Base64.strict_encode64(ENV["GIT_AUTHORIZATION"])
         )
         gym(
           configuration: ENV["CONFIGURATION"],
           workspace: ENV["WORKSPACE"],
           scheme: ENV["XCODE_SCHEME"],
           export_method: "app-store",
           verbose: false,
           clean: true
         )
         pilot(
           ipa: ENV["IPA_FILE_PATH"],
           app_identifier: ENV["APP_BUNDLE_ID"],
           skip_waiting_for_build_processing: true,
           skip_submission: true,
           distribute_external: false,
           notify_external_testers: false
         )
   end
end

